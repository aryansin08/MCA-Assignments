Terminals unused in grammar

    '+'
    '-'
    '*'
    '/'


Grammar

    0 $accept: S $end

    1 S: ternary NL

    2 ternary: expression Q expression C expression

    3 expression: ID
    4           | '(' expression ')'
    5           | terminal
    6           | expression RELOP expression

    7 terminal: BOOL
    8         | NUMBER
    9         | STRING


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 4
    ')' (41) 4
    '*' (42)
    '+' (43)
    '-' (45)
    '/' (47)
    error (256)
    NUMBER (258) 8
    ID (259) 3
    RELOP (260) 6
    BOOL (261) 7
    Q (262) 2
    C (263) 2
    STRING (264) 9
    NL (265) 1


Nonterminals, with rules where they appear

    $accept (17)
        on left: 0
    S (18)
        on left: 1
        on right: 0
    ternary (19)
        on left: 2
        on right: 1
    expression (20)
        on left: 3 4 5 6
        on right: 2 4 6
    terminal (21)
        on left: 7 8 9
        on right: 5


State 0

    0 $accept: . S $end

    NUMBER  shift, and go to state 1
    ID      shift, and go to state 2
    BOOL    shift, and go to state 3
    STRING  shift, and go to state 4
    '('     shift, and go to state 5

    S           go to state 6
    ternary     go to state 7
    expression  go to state 8
    terminal    go to state 9


State 1

    8 terminal: NUMBER .

    $default  reduce using rule 8 (terminal)


State 2

    3 expression: ID .

    $default  reduce using rule 3 (expression)


State 3

    7 terminal: BOOL .

    $default  reduce using rule 7 (terminal)


State 4

    9 terminal: STRING .

    $default  reduce using rule 9 (terminal)


State 5

    4 expression: '(' . expression ')'

    NUMBER  shift, and go to state 1
    ID      shift, and go to state 2
    BOOL    shift, and go to state 3
    STRING  shift, and go to state 4
    '('     shift, and go to state 5

    expression  go to state 10
    terminal    go to state 9


State 6

    0 $accept: S . $end

    $end  shift, and go to state 11


State 7

    1 S: ternary . NL

    NL  shift, and go to state 12


State 8

    2 ternary: expression . Q expression C expression
    6 expression: expression . RELOP expression

    RELOP  shift, and go to state 13
    Q      shift, and go to state 14


State 9

    5 expression: terminal .

    $default  reduce using rule 5 (expression)


State 10

    4 expression: '(' expression . ')'
    6           | expression . RELOP expression

    RELOP  shift, and go to state 13
    ')'    shift, and go to state 15


State 11

    0 $accept: S $end .

    $default  accept


State 12

    1 S: ternary NL .

    $default  reduce using rule 1 (S)


State 13

    6 expression: expression RELOP . expression

    NUMBER  shift, and go to state 1
    ID      shift, and go to state 2
    BOOL    shift, and go to state 3
    STRING  shift, and go to state 4
    '('     shift, and go to state 5

    expression  go to state 16
    terminal    go to state 9


State 14

    2 ternary: expression Q . expression C expression

    NUMBER  shift, and go to state 1
    ID      shift, and go to state 2
    BOOL    shift, and go to state 3
    STRING  shift, and go to state 4
    '('     shift, and go to state 5

    expression  go to state 17
    terminal    go to state 9


State 15

    4 expression: '(' expression ')' .

    $default  reduce using rule 4 (expression)


State 16

    6 expression: expression . RELOP expression
    6           | expression RELOP expression .

    $default  reduce using rule 6 (expression)


State 17

    2 ternary: expression Q expression . C expression
    6 expression: expression . RELOP expression

    RELOP  shift, and go to state 13
    C      shift, and go to state 18


State 18

    2 ternary: expression Q expression C . expression

    NUMBER  shift, and go to state 1
    ID      shift, and go to state 2
    BOOL    shift, and go to state 3
    STRING  shift, and go to state 4
    '('     shift, and go to state 5

    expression  go to state 19
    terminal    go to state 9


State 19

    2 ternary: expression Q expression C expression .
    6 expression: expression . RELOP expression

    RELOP  shift, and go to state 13

    $default  reduce using rule 2 (ternary)
